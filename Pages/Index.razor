@page "/"
@using BlazorTodo.Models

<div class="container p-4">
    <h1 class="pb-2 text-lg">Todo</h1>
    <div class="search mb-2">
        <input type="text" @bind='inputTodo' class="border border-blue-300 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
        <button @onclick="addList" class="bg-green-500 hover:bg-green-700 text-white py-1 px-2 rounded">Add to List</button>
    </div>
    <div class="error">
        <p class="text-red-500 mb-2">@error</p>
    </div>
    <div class="list">
        @for (int i = 0; i < todoList.Count; i++)
        {
            var index = i;
            var item = todoList[i];

           <div class="item flex justify-between w-44"> 
               <p 
               class="overflow-hidden break-words cursor-pointer @(item.isComplete ? "line-through text-gray-300" : "text-gray-900")"
                @onclick="(() => markComplete(item))"
               >@item.Title</p>
               <span class="text-red-600 cursor-pointer" @onclick="(() => removeItem(index))">&times;</span>
            </div>
           
        }
    </div>
</div>

@code {
    public string inputTodo { get; set; } = "";
    public string error { get; set; }
    public List<Todo> todoList = new List<Todo>();

    public void addList(){

        var item = new Todo();
        item.Title = inputTodo;
        if(inputTodo.Length != 0){
            todoList.Add(item);
            inputTodo = "";
        }

        if(item.Title == ""){
            error = "You should write something!";
        }else{
            error = "";
        }
    }

    public void removeItem(int index) {
        todoList.RemoveAt(index);
        error = "";
    }

    public void markComplete(Todo todo){
        todo.isComplete = !todo.isComplete;
        error = "";
    }

}